# -*- coding: utf-8 -*-
"""CSS-1012 Python introduction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DlQrlYAFQDXaHzZ4XZpni2Mo7y3fkqPC

Jeff Rameau, Damani Chietan, Daniel Simpson

Hello World
"""

print("This line will be printed.")

x = 1
if x == 1:
  #indented four spaces
  print("x is 1.")

print("Goodbye, World!")

"""Variables and Types"""

myint = 7
print(myint)

myfloat = 7.0
print(myfloat)
myfloat = float(7)
print(myfloat)

mystring = 'hello'
print(mystring)
mystring = "hello"
print(mystring)

mystring = "Don't worry about apostrophes"
print(mystring)

one = 1
two = 2
three = one + two
print(three)

hello = "hello"
world = "world"
helloworld = hello + " " + world
print(helloworld)

a, b = 3, 4
print(a, b)

# This will not work
one = 1
two = 2
hello = "hello"
print(one + two + hello)

mystring = "hello"
myfloat = 10.0
myint = 20

# testing code
if mystring == "hello":
    print("String: %s" % mystring)
if isinstance(myfloat, float) and myfloat == 10.0:
    print("Float: %f" % myfloat)
if isinstance(myint, int) and myint == 20:
    print("Integer: %d" % myint)

"""Lists

"""

myList = []
myList.append(1)
myList.append(2)
myList.append(3)
print(myList[0]) #prints 1
print(myList[1]) #prints 2
print(myList[2]) #prints 3

# prints out 1, 2, 3
for x in myList:
  print(x)

mylist = [1,2,3]
print(mylist[10])
#index 10 does not exist in the list, only goes from index 0-2

numbers = []
strings = []
names = ["John", "Eric", "Jessica"]

# write your code here
numbers.append(1)
numbers.append(2)
numbers.append(3)

strings.append("hello")
strings.append("world")

second_name = names[1]

# this code should write out the filled arrays and the second name in the names list (Eric).
print(numbers)
print(strings)
print("The second name on the names list is %s" % second_name)

"""Basic Operators """

number = 1 + 2 * 3 / 4.0
print(number)

remainder = 11 % 3
print(remainder)

squared = 7 ** 2
cubed = 2 ** 6
print(squared)
print(cubed)

helloworld = "hello" + " " + "world"
print(helloworld)

lotsofhellos = "hello" * 10
print(lotsofhellos)

even_numbers = [2,4,6,8]
odd_numbers = [1,3,5,7]
all_numbers = even_numbers + odd_numbers
print(all_numbers)

print([1,2,3] * 3)

x = object()
y = object()

# TODO: change this code
x_list = [x] * 10
y_list = [y] * 10
big_list = x_list + y_list

print("x_list contains %d objects" % len(x_list))
print("y_list contains %d objects" % len(y_list))
print("big_list contains %d objects" % len(big_list))

# testing code
if x_list.count(x) == 10 and y_list.count(y) == 10:
    print("Almost there...")
if big_list.count(x) == 10 and big_list.count(y) == 10:
    print("Great!")

"""String Formatting"""

# This prints out "Hello, John!"
name = "John"
print("Hello, %s!" % name)

# This prints out "John is 23 years old."
name = "John"
age = 23
print("%s is %d years old." % (name, age))

# This prints out: A list: [1, 2, 3]
mylist = [1,2,3]
print("A list: %s" % mylist)

data = ("John", "Doe", 53.44)
format_string = "Hello %s %s. Your current balance is $%s."

print(format_string % data)

"""Basic String Operations """

astring = "Hello world!"
astring2 = 'Hello world!'

astring = "Hello world!"
print("single quotes are ' '")

print(len(astring))
#The len operator prints the length of the string

a = "I love Cyber Security"
print(a.index("C"))
#This prints the postion of the "C" character in the string

print(a.count("e"))
#This prints the amount of e's we have in our string

a = "I hate my job"
print(a[3:7])
#This prints the string starting from position 3 and ending at position 7

print(a[3:7:2])
#This prints the string starting at postion 3 and ending at position 7 but 2 postions are skipped
#[start:stop:step]

print(a[3:7:1])
#This prints out the same result as a[3:7]

a = "Orange juice is better than cranberry juice"
print(a[::-1])
#This print statement prints the code in an inverted format

a = "kevin durant is the best player in the world"
print(a.upper())
print(a.lower())
#These are the operators that convert a string to all lowercase/uppercase

a = "dogs are the best pets"
print(a.startswith("dogs"))
print(a.startswith("cats"))
#This command provides a boleen result which is based on if the string starts with the entered string

a = "a hot dog is a sandwich"
b = a.split(" ")
print(b)
#The a.split command breaks up the string and turns it into a list

"""Conditions"""

name = Damani
age = 22

if name == "Damani" and age == 22:
  print("Your name is Damani. You are 22 years old")

if name == "Damani" or name == "Jeff":
  print("Your name is Damani or Jeff")

#The "and" and "or" boolean operators allow building complex boolean expressions

a = ["Damani", "Daniel", "Jeff", "John", "Mike", "Chris", "Nancy"]
if "Damani" in a:
  print("Your name is Damani")

#The "in" operator could be used to check if a specified object exists within an iterable object container, such as a list:

x = 5
y = 10

if y < x:
  print("y is less than x")
elif y > x:
  print("y is greater than x")
else:
  print("y is equal to x")

#Python uses indentation to define code blocks, instead of brackets. This is an example of that

a = [2, 4, 6]
b = [2, 4, 6]
print(a==b)
print(a is b)
#Unlike the double equals operator "==", the "is" operator does not match the values of the variables, but the instances themselves

x = True
y = False
print(not x)
print(not y)
#Using "not" before a boolean expression inverts it

"""Loops"""

#prints even numbers from 0 to 10
for x in range(0,10,2):
  print(x)

#For loops iterate over a given sequence.

x = 0 
while x < 5:
  print(x)
  x+=1

  #While loops repeat as long as a certain boolean condition is met.

x = 0
while True:
  print(x)
  x += 1
  if x >= 10:
    break

#prints even number with a range of [0,10]
for y in range(10):
  if y % 2 == 1:
    continue
  print(y)

#break is used to exit a for loop or a while loop, whereas continue is used to skip the current block, and return to the "for" or "while" statement.

x = 0
while (x < 6):
  print(x)
  x+=1
else:
  print("x value is reached %d" %(x))

#When the loop condition of "for" or "while" statement fails then code part in "else" is executed.

for y in range(0, 10):
  if(y >= 5):
    break
  print(y)
else:
  print("this is not printed because for loop is terminated because of break but not due to fail in condition")
#If a break statement is executed inside the for loop then the "else" part is skipped

"""Functions"""

#Car dealership
def welcome():
  print("Welcome to our car dealership")

def cars(make, year, miles, price):
  print("The make: " + make + " Year: " + year + " miles: " + miles + " price: " + price)

welcome()
cars("Toyota", "2020", "10,000", "35,000")
cars("Nisan", "2018", "30,000", "20,000")
cars("Jeep", "2021", "5,000", "35,000")

#Simply write the function's name followed by (), placing any required arguments within the brackets

"""
Classes and Objects"""

#Objects are an encapsulation of variables and functions into a single entity.
#Objects get their variables and functions from classes. 

class css1012:
  variable = "Python is fun"

  def sju(self):
    print("Network Perimeter Security Class is fun")

team7 = css1012()

team7.variable

#To access the variable inside of the newly created object "myobjectx" you would take the steps above

team8 = css1012()
team8.variable = "I like to code"

print(team7.variable)
print(team8.variable)



#You can create multiple different objects that are of the same class
#However, each object contains independent copies of the variables defined in the class.
#if we were to define another object with the "css1012" class and then change the string in the variable above



#To access a function inside of an object you use notation similar to accessing a variable:
team7.sju()

class sjustudents:
  def __init__(self, xnumber):
    self.xnumber = "X03513120"

xnum = sjustudents

print(xnum)

#The __init__() function, is a special function that is called when the class is being initiated. It's used for asigning values in a class.

"""Dictionaries"""

#A dictionary is a data type similar to arrays, but works with keys and values instead of indexes.

studentid = {}
studentid["Damani"] = 123456
studentid["Jeff"] = 654321
studentid["Daniel"] = 345678

print(studentid)

#Alternatively, a dictionary can be initialized with the same values in the following notation:
studentid2 = {
    
    "Kevin" : 231234,
    "Stephen" : 564323,
    "Lebron" :856907



}

print(studentid2)

#Iterating over dictionaries
studentid = {}
studentid["Damani"] = 123456
studentid["Jeff"] = 654321
studentid["Daniel"] = 345678

for name, number in studentid.items():
  print("Student ID number of %s is %d" % (name, number))

#Removing a value
studentid = {}
studentid["Damani"] = 123456
studentid["Jeff"] = 654321
studentid["Daniel"] = 345678

del studentid["Damani"]
print(studentid)

#another way to do it

studentid.pop("Daniel")
print(studentid)

"""Modules & Packages"""

#we're using an example of a hangman game
#words.py

wordlist = "aback","abaft","abandoned","abashed","aberrant","abhorrent","abiding","abject","ablaze","able","abnormal","aboard","aboriginal","abortive","abounding","abrasive","abrupt","absent","absorbed","absorbing","abstracted","absurd","abundant","abusive","accept","acceptable","accessible","accidental","account","accurate","achiever","acid","acidic","acoustic","acoustics","acrid","act","action","activity","actor","actually","ad hoc","adamant","adaptable","add","addicted","addition","adhesive","adjoining","adjustment","admire","admit","adorable","adventurous","advertisement","advice","advise","afford","afraid","aftermath","afternoon","afterthought","aggressive","agonizing","agree","agreeable","agreement","ahead","air","airplane","airport","ajar","alarm","alcoholic","alert","alike","alive","alleged","allow","alluring","aloof","amazing","ambiguous","ambitious","amount","amuck","amuse","amused","amusement","amusing","analyze","ancient","anger","angle","angry","animal","animated","announce","annoy","annoyed","annoying","answer","ants","anxious","apathetic","apologise","apparatus","apparel","appear","applaud","appliance","appreciate","approval","approve","aquatic","arch","argue","argument","arithmetic","arm","army","aromatic","arrange","arrest","arrive","arrogant","art","ashamed","ask","aspiring","assorted","astonishing","attach","attack","attempt","attend","attract","attraction","attractive","aunt","auspicious","authority","automatic","available","average","avoid","awake","aware","awesome","awful","axiomatic","babies","baby","back","bad","badge","bag","bait","bake","balance","ball","ban","bang","barbarous","bare","base","baseball","bashful","basin","basket","basketball","bat","bath","bathe","battle","bawdy","bead","beam","bear","beautiful","bed","bedroom","beds","bee","beef","befitting","beg","beginner","behave","behavior","belief","believe","bell","belligerent","bells","belong","beneficial","bent","berry","berserk","best","better","bewildered","big","bike","bikes","billowy","bird","birds","birth","birthday","bit","bite","bite-sized","bitter","bizarre","black","black-and-white","blade","bleach","bless","blind","blink","blood","bloody","blot","blow","blue","blue-eyed","blush","blushing","board","boast","boat","boil","boiling","bolt","bomb","bone","book","books","boorish","boot","border","bore","bored","boring","borrow","bottle","bounce","bouncy","boundary","boundless","bow","box","boy","brainy","brake","branch","brash","brass","brave","brawny","breakable","breath","breathe","breezy","brick","bridge","brief","bright","broad","broken","brother","brown","bruise","brush","bubble","bucket","building","bulb","bump","bumpy","burly","burn","burst","bury","bushes","business","bustling","busy","butter","button","buzz","cabbage","cable","cactus","cagey","cake","cakes","calculate","calculating","calculator","calendar","call","callous","calm","camera","camp","can","cannon","canvas","cap","capable","capricious","caption","car","card","care","careful","careless","caring","carpenter","carriage","carry","cars","cart","carve","cast","cat","cats","cattle","cause","cautious","cave","ceaseless","celery","cellar","cemetery","cent","certain","chalk","challenge","chance","change","changeable","channel","charge","charming","chase","cheap","cheat","check","cheer","cheerful","cheese","chemical","cherries","cherry","chess","chew","chicken","chickens","chief","childlike","children","chilly","chin","chivalrous","choke","chop","chubby","chunky","church","circle","claim","clam","clammy","clap","class","classy","clean","clear","clever","clip","cloistered","close","closed","cloth","cloudy","clover","club","clumsy","cluttered","coach","coal","coast","coat","cobweb","coherent","coil","cold","collar","collect","color","colorful","colossal","colour","comb","combative","comfortable","command","committee","common","communicate","company","compare","comparison","compete","competition","complain","complete","complex","concentrate","concern","concerned","condemned","condition","confess","confuse","confused","connect","connection","conscious","consider","consist","contain","continue","control","cooing","cook","cool","cooperative","coordinated","copper","copy","corn","correct","cough","count","country","courageous","cover","cow","cowardly","cows","crabby","crack","cracker","crash","crate","craven","crawl","crayon","crazy","cream","creator","creature","credit","creepy","crib","crime","crook","crooked","cross","crow","crowd","crowded","crown","cruel","crush","cry","cub","cuddly","cultured","cumbersome","cup","cure","curious","curl","curly","current","curtain","curve","curved","curvy","cushion","cut","cute","cycle","cynical","dad","daffy","daily","dam","damage","damaged","damaging","damp","dance","dangerous","dapper","dare","dark","dashing","daughter","day","dazzling","dead","deadpan","deafening","dear","death","debonair","debt","decay","deceive","decide","decision","decisive","decorate","decorous","deep","deeply","deer","defeated","defective","defiant","degree","delay","delicate","delicious","delight","delightful","delirious","deliver","demonic","depend","dependent","depressed","deranged","describe","descriptive","desert","deserted","deserve","design","desire","desk","destroy","destruction","detail","detailed","detect","determined","develop","development","devilish","didactic","different","difficult","digestion","diligent","dime","dinner","dinosaurs","direction","direful","dirt","dirty","disagree","disagreeable","disappear","disapprove","disarm","disastrous","discover","discovery","discreet","discussion","disgusted","disgusting","disillusioned","dislike","dispensable","distance","distinct","distribution","disturbed","divergent","divide","division","dizzy","dock","doctor","dog","dogs","doll","dolls","domineering","donkey","door","double","doubt","doubtful","downtown","drab","draconian","drag","drain","dramatic","drawer","dream","dreary","dress","drink","drip","driving","drop","drown","drum","drunk","dry","duck","ducks","dull","dust","dusty","dynamic","dysfunctional","eager","ear","early","earn","earsplitting","earth","earthquake","earthy","easy","eatable","economic","edge","educate","educated","education","effect","efficacious","efficient","egg","eggnog","eggs","eight","elastic","elated","elbow","elderly","electric","elegant","elfin","elite","embarrass","embarrassed","eminent","employ","empty","enchanted","enchanting"

#Hangman.py
import random
from hangman_visual import lives_visual_dict
import string
#This import randomizes the word we get from the wordlist

from words import wordlist
#we're importing the wordlist from the words.py file

#Module initialization
def get_valid_word(words):
    word = random.choice(words)  # randomly chooses something from the list
    while '-' in word or ' ' in word:
        word = random.choice(words)

    return word.upper()


def hangman():
    word = get_valid_word(words)
    word_letters = set(word)  # letters in the word
    alphabet = set(string.ascii_uppercase)
    used_letters = set()  # what the user has guessed

    lives = 7

    # getting user input
    while len(word_letters) > 0 and lives > 0:
        # letters used
        # ' '.join(['a', 'b', 'cd']) --> 'a b cd'
        print('You have', lives, 'lives left and you have used these letters: ', ' '.join(used_letters))

        # what current word is (ie W - R D)
        word_list = [letter if letter in used_letters else '-' for letter in word]
        print(lives_visual_dict[lives])
        print('Current word: ', ' '.join(word_list))

        user_letter = input('Guess a letter: ').upper()
        if user_letter in alphabet - used_letters:
            used_letters.add(user_letter)
            if user_letter in word_letters:
                word_letters.remove(user_letter)
                print('')

            else:
                lives = lives - 1  # takes away a life if wrong
                print('\nYour letter,', user_letter, 'is not in the word.')

        elif user_letter in used_letters:
            print('\nYou have already used that letter. Guess another letter.')

        else:
            print('\nThat is not a valid letter.')

    # gets here when len(word_letters) == 0 OR when lives == 0
    if lives == 0:
        print(lives_visual_dict[lives])
        print('You died, sorry. The word was', word)
    else:
        print('YAY! You guessed the word', word, '!!')


if __name__ == '__main__':
    hangman()